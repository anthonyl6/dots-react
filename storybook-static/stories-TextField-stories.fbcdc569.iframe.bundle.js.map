{"version":3,"file":"stories-TextField-stories.fbcdc569.iframe.bundle.js","mappings":";;;AAsEA;AACA;AACA;;;;;;;AAQA;AAEA;;;;;AAKA;;;;;AAMA;;;;AAIA;AASA;AASA;;;AAWA;;AASA;AAQA;AAMA;;;AAGA;;;AAUA;;AAIA","sources":["webpack://@dots-ui/react/./src/components/TextField.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./css/main.css\";\nimport styled from \"styled-components\";\nimport { getThemeValue } from \"./ThemeProvider\";\n\nexport type TextFieldProps = React.HTMLAttributes<HTMLInputElement> & {\n  children: React.ReactNode;\n  type?: \"text\" | \"password\" | \"email\" | \"number\";\n  disabled?: boolean;\n  placeholder?: string;\n  regex?: RegExp;\n  value?: string;\n  setValue?: (value: string) => void;\n  error?: string;\n  success?: string;\n  info?: string;\n  divProps?: React.HTMLAttributes<HTMLDivElement>;\n  variant?: \"underlined\" | \"outlined\" | \"none\";\n};\n\nexport const TextField = (props: TextFieldProps) => {\n  const { regex, error, success, info } = props;\n  const [regexPassed, setRegexPassed] = React.useState(true);\n  const ref = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    ref.current?.addEventListener(\"input\", (event: any) => {\n      const e = event as React.ChangeEvent<HTMLInputElement>;\n      if (regex && e.target.value) {\n        setRegexPassed(regex.test(e.target.value ?? \"\"));\n      } else {\n        setRegexPassed(true);\n      }\n    });\n  }, [regex, ref]);\n\n  React.useEffect(() => {\n    if (regex && props.value) {\n      setRegexPassed(regex.test(props.value ?? \"\"));\n    } else {\n      setRegexPassed(true);\n    }\n  }, [regex, props.value]);\n\n  return (\n    <TextFieldContainer {...props.divProps}>\n      <TextFieldElement\n        {...props}\n        error={error ?? !regexPassed ? \"\" : undefined}\n        ref={ref}\n      />\n      <HelperText\n        shown={\n          (!!error && typeof error === \"string\" && error.length > 0) ||\n          (!!success && typeof success === \"string\" && success.length > 0) ||\n          (!!info && typeof info === \"string\" && info.length > 0)\n        }\n        error={!!error}\n        success={!!success}\n        info={!!info}\n      >\n        {error ?? success ?? info ?? \"\"}\n      </HelperText>\n    </TextFieldContainer>\n  );\n};\n\nconst TextFieldElement = styled.input<TextFieldProps>`\n  font-family: \"Poppins\", sans-serif;\n  font-size: 1em;\n  color: ${(props) => props.theme.text ?? getThemeValue(\"text\")};\n  border: 2px solid ${(props) => props.theme.text ?? getThemeValue(\"text\")};\n  background-color: ${(props) =>\n    props.theme.background ?? getThemeValue(\"background\")};\n  border-radius: 0.375em;\n  padding: 0.5em 1em;\n  outline: none;\n  transition: all 0.2s ease-in-out;\n\n  :disabled {\n    border-color: ${(props) =>\n      props.theme.disabled ?? getThemeValue(\"disabled\")};\n    color: ${(props) => props.theme.disabled ?? getThemeValue(\"disabled\")};\n    cursor: not-allowed;\n  }\n\n  &:hover:not(:disabled) {\n    border-color: ${(props) =>\n      props.theme.secondary ?? getThemeValue(\"secondary\")};\n  }\n\n  &:active:not(:disabled),\n  &:focus:not(:disabled) {\n    border-color: ${(props) => props.theme.primary ?? getThemeValue(\"primary\")};\n  }\n\n  &:not(:focus):not(:disabled) {\n    ${(props) =>\n      props.info &&\n      `\n      border-color: ${props.theme.info ?? getThemeValue(\"info\")};\n      color: ${props.theme.info ?? getThemeValue(\"info\")};\n      ::placeholder {\n        color: ${props.theme.info ?? getThemeValue(\"info\")};\n      }\n    `}\n    ${(props) =>\n      props.success &&\n      `\n      border-color: ${props.theme.success ?? getThemeValue(\"success\")};\n      color: ${props.theme.success ?? getThemeValue(\"success\")};\n      ::placeholder {\n        color: ${props.theme.success ?? getThemeValue(\"success\")};\n      }\n    `}\n    ${(props) =>\n      props.error &&\n      `\n      border-color: ${props.theme.error ?? getThemeValue(\"error\")};\n      color: ${props.theme.error ?? getThemeValue(\"error\")};\n      ::placeholder {\n        color: ${props.theme.error ?? getThemeValue(\"error\")};\n      }\n    `}\n  }\n\n  ${(props) =>\n    props.variant === \"underlined\" &&\n    `\n    border: none;\n    border-bottom: 2px solid ${props.theme.text ?? getThemeValue(\"text\")};\n    border-radius: 0;\n    padding: 0.25em;\n  `}\n\n  ${(props) =>\n    props.variant === \"none\" &&\n    `\n    border: none;\n    padding: 0.25em;\n  `}\n`;\n\nconst HelperText = styled.p<{\n  shown: boolean;\n  error?: boolean;\n  success?: boolean;\n  info?: boolean;\n}>`\n  opacity: ${(props) => (props.shown ? 1 : 0)};\n  font-family: \"Poppins\", sans-serif;\n  font-size: 0.75em;\n  color: ${(props) =>\n    props.error\n      ? props.theme.error ?? getThemeValue(\"error\")\n      : props.success\n      ? props.theme.success ?? getThemeValue(\"success\")\n      : props.info\n      ? props.theme.info ?? getThemeValue(\"info\")\n      : props.theme.text ?? getThemeValue(\"text\")};\n  margin: 0.25em 0 0 0.5em;\n  position: absolute;\n  bottom: ${(props) => (props.shown ? \"-1.5em\" : \"-0.5em\")};\n  transition: all 0.2s ease-in-out;\n`;\n\nconst TextFieldContainer = styled.div`\n  display: flex;\n  position: relative;\n`;\n"],"names":[],"sourceRoot":""}